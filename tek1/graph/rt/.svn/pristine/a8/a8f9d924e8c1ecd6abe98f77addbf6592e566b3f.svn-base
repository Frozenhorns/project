/*
** calc_management.c for raytracer in /home/leprov_a//depot/rt/src/calc
** 
** Made by alexis leprovost
** Login   <leprov_a@epitech.net>
** 
** Started on  Wed May  2 18:58:55 2012 alexis leprovost
** Last update Sun Jun  3 01:14:35 2012 ronan guiho
*/

#include	<stdlib.h>

#include	"raytracer.h"
#include	"global.h"
#include	"detail.h"
#include	"utils.h"
#include	"color.h"
#include	"calc.h"
#include	"init.h"
#include	"box.h"
#include	"my.h"

t_global	*global_thread;
pthread_mutex_t mutex;

static int
filter_color(t_color *color, int filter)
{
  if (color == NULL)
    return (EXIT_FAILURE);
  color->red = color->red * ((filter >> 16) / 255.0F);
  color->green = color->green * (((filter >> 8) % 256) / 255.0F);
  color->blue = color->blue * ((filter % 256) / 255.0F);
  return (EXIT_SUCCESS);
}

int
calc_management(t_global *global, t_color *color, double x, double y)
{
  t_object	*tmp;
  t_detail	detail;
  double	vector[NB_DIMENSION];

  tmp = NULL;
  if (global == NULL || global->scene == NULL)
    return (EXIT_FAILURE);
  tmp = global->scene->object;
  if (restat_color(color) || calc_direction_vector(global, vector, x, y) ||
      init_detail(&detail))
    return (EXIT_FAILURE);
  while (tmp)
    {
      if (inter_ray_box(global->scene->camera, vector, tmp))
	tmp->inter(global->scene->camera, tmp, &detail, vector);
      tmp = tmp->next;
    }
  if (detail.object != NULL)
    {
      calc_detail(&detail, color, global->scene->camera, vector);
      calc_effect(&detail, color, global->scene->light, vector);
    }
  if (global->scene->filter != 0)
    filter_color(color, global->scene->filter);
  return (EXIT_SUCCESS);
}
