/*
** obj_create_cube.c for obj_cube in /home/guiho_r/tek1/rt/src/obj
** 
** Made by ronan guiho
** Login   <guiho_r@epitech.net>
** 
** Started on  Thu May 31 19:34:07 2012 ronan guiho
** Last update Sat Jun  2 18:14:50 2012 ronan guiho
*/

#include <stdio.h>
#include <stdlib.h>

#include "global.h"
#include "object.h"

int		obj_duplique_double_tab(double *tab, double *tab1,
					int count)
{
  int		i;

  i = 0;
  while (i < count)
    {
      tab[i] = tab1[i];
      i++;
    }
  return (EXIT_SUCCESS);
}

int		obj_duplique_content(t_object *obj, t_object *obj1)
{
  obj_duplique_double_tab(obj->effect, obj1->effect, NB_DIMENSION);
  obj->image = obj1->image;
  obj->material = obj1->material;
  obj->image_bump = obj1->image_bump;
  obj->type = PLAN;
  obj_duplique_double_tab(obj->position, obj1->position, NB_DIMENSION);
  obj_duplique_double_tab(obj->rotation, obj1->rotation, NB_DIMENSION);
  if ((obj->color = malloc(sizeof(*obj->color))) == NULL)
    return (EXIT_FAILURE);
  //obj->color = obj1->color
  obj->inter = obj1->inter;
  obj->attr = obj1->attr;
  obj->perlin = obj1->perlin;
  obj->inhibitor = obj1->inhibitor;
  return (EXIT_SUCCESS);
}

int     	obj_duplique(t_object **list, t_object *obj,
			     double size)
{
  t_object	*ptr;
  t_object	*tmp;

  tmp = *list;
  if ((ptr = malloc(sizeof(*ptr))) == NULL)
    return (EXIT_FAILURE);
  ptr->next = NULL;
  obj_duplique_content(ptr, obj);
  if (*list == NULL)
    *list = ptr;
  else
    {
      while (tmp->next)
	tmp = tmp->next;
      tmp->next = ptr;
    }
  return (EXIT_SUCCESS);
}

int		display_obj(t_object *obj)
{
  printf("=======================\n");
  printf("Obj->Position[X] = %f\n", obj->position[X]);
  printf("Obj->Position[Y] = %f\n", obj->position[Y]);
  printf("Obj->Position[Z] = %f\n", obj->position[Z]);
  printf("-------\n");
  printf("Obj->Rotation[X] = %f\n", obj->rotation[X]);
  printf("Obj->Rotation[Y] = %f\n", obj->rotation[Y]);
  printf("Obj->Rotation[Z] = %f\n", obj->rotation[Z]);
  printf("---------\n");
  printf("COlor->red = %f\n", obj->color->red);
  printf("COlor->green = %f\n", obj->color->green);
  printf("COlor->blue = %f\n", obj->color->blue);
  printf("=======================\n");
  return (EXIT_SUCCESS);
}

t_object	*obj_create_cube_plan(t_object *obj)
{
  int		i;
  t_object	*tmp;
  t_object	*list;
  double	size;
  t_limit	*limit;

  i = 0;
  size = (double)((t_cube *)obj->son)->size;
  list = NULL;
  if ((limit = malloc(sizeof(*limit))) == NULL)
    return (NULL);
  limit->flag = 0;
  limit->flag |= MIN_X | MAX_X | MIN_Y | MAX_Y;
  limit->x[0] = -size;
  limit->x[1] = size;
  limit->y[0] = -size;
  limit->y[1] = size;
  limit->z[0] = 0.0;
  limit->z[1] = 0.0;
  while (i < 5)
    {
      obj_duplique(&list, obj,size);
      i++;
    }
  tmp = list;
  tmp->position[Z] += -size;
  tmp->color->red = 255.0;
  tmp->color->green = 0.0;
  tmp->color->green = 0.0;
  tmp->limit = limit;
  tmp = tmp->next;
  tmp->position[Z] += size;
  tmp->color->red = 0.0;
  tmp->color->green = 255.0;
  tmp->color->blue = 0.0;
  tmp->limit = limit;
  tmp = tmp->next;
  tmp->position[Y] += size;
  tmp->rotation[X] += 90;
  tmp->color->red = 0.0;
  tmp->color->green = 255.0;
  tmp->color->blue = 255.0;
  tmp->limit = limit;
  tmp = tmp->next;
  tmp->position[Y] += -size;
  tmp->rotation[X] += -90;
  tmp->color->red = 255.0;
  tmp->color->green = 255.0;
  tmp->color->blue = 0.0;
  tmp->limit = limit;
  tmp = tmp->next;
  tmp->position[X] += size;
  tmp->rotation[Y] += 90;
  tmp->color->red = 60.0;
  tmp->color->green = 100.0;
  tmp->color->blue = 200.0;
  tmp->limit = limit;
  tmp = tmp->next;
  return (list);
}

int		obj_analize_cube(t_object **obj)
{
  t_object	*tmp;
  t_object	*list;

  tmp = *obj;
  while (tmp)
    {
      if (tmp->type == CUBE)
	{
	  list = obj_create_cube_plan(tmp);
	  *obj = list;
	}
      tmp = tmp->next;
    }
  return (EXIT_SUCCESS);
}
