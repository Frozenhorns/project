/*
** calc_transparency.c for raytracer in /home/leprov_a//depot/rt/src/calc
** 
** Made by alexis leprovost
** Login   <leprov_a@epitech.net>
** 
** Started on  Tue May 29 22:24:36 2012 alexis leprovost
** Last update Fri Jun  1 11:38:38 2012 alexis leprovost
*/

#include	<stdlib.h>
#include	<math.h>

#include	"raytracer.h"
#include	"global.h"
#include	"detail.h"
#include	"texture.h"
#include	"camera.h"
#include	"light.h"
#include	"utils.h"
#include	"calc.h"
#include	"init.h"

static int
get_object_refracte(t_camera *camera, t_detail *detail,
		    double *vector, t_color *color)
{
  t_object      *tmp;
  t_object	*data;

  data = detail->object;
  tmp = detail->object;
  while (tmp->prev)
    tmp = tmp->prev;
  init_detail(detail);
  while (tmp)
    {
      if (tmp != data)
	tmp->inter(camera, tmp, detail, vector);
      tmp = tmp->next;
    }
  if (detail->object != NULL)
    calc_detail(detail, color, camera, vector);
  return (EXIT_SUCCESS);
}

static int
get_object_reflechie(t_camera *camera, t_detail *detail,
		     double *vector, t_color *color)
{
  t_object      *tmp;

  tmp = detail->object;
  while (tmp->prev)
    tmp = tmp->prev;
  init_detail(detail);
  while (tmp)
    {
      tmp->inter(camera, tmp, detail, vector);
      tmp = tmp->next;
    }
  if (detail->object != NULL)
    calc_detail(detail, color, camera, vector);
  return (EXIT_SUCCESS);
}

static int
calc_reflection_bis(t_detail *detail, t_color *color,
		    t_light *light, double *vector)
{
  static int	i;
  double	r[NB_DIMENSION];
  t_camera	camera;
  t_object	*tmp;

  if (i >= CONST_REFL || detail->object == NULL || !detail->object->effect[REFLECTION])
    {
      if (detail->object)
	light_management(detail, &color[i], light, vector);
      else
	{
	  color[i].red = 0.0F;
	  color[i].green = 0.0F;
	  color[i].blue = 0.0F;
	}
      return (EXIT_SUCCESS);
    }
  light_management(detail, &color[i], light, vector);
  cpy_point(detail->position, camera.position);
  get_vector_reflechie(vector, detail->normal, r);
  cpy_point(r, vector);
  ++i;
  tmp = detail->object;
  get_object_reflechie(&camera, detail, vector, &color[i]);
  calc_reflection_bis(detail, color, light, vector);
  --i;
  if (tmp != NULL && tmp->effect[REFLECTION] &&
      (color[i + 1].red >= 0.0F && color[i + 1].green >= 0.0F && color[i + 1].blue >= 0.0F))
    {
      color[i].red = (color[i + 1].red * tmp->effect[REFLECTION]) +
	(color[i].red * (1.0F - tmp->effect[REFLECTION]));
      color[i].green = (color[i + 1].green * tmp->effect[REFLECTION]) +
	(color[i].green * (1.0F - tmp->effect[REFLECTION]));
      color[i].blue = (color[i + 1].blue * tmp->effect[REFLECTION]) +
	(color[i].blue * (1.0F - tmp->effect[REFLECTION]));
    }
  return (EXIT_SUCCESS);
}

static int
calc_effect_bis(t_detail *detail, t_color *color,
		t_light *light, double *vector)
{
  t_color	tmp[CONST_REFL + 1];
  t_detail	data;
  int	i;

  if (detail == NULL || color == NULL || light == NULL || vector == NULL)
    return (EXIT_FAILURE);
  i = -1;
  cpy_point(detail->position, data.position);
  cpy_point(detail->normal, data.normal);
  data.k = detail->k;
  data.object = detail->object;
  while (++i <= CONST_REFL)
    {
      tmp[i].red = -1.0F;
      tmp[i].green = -1.0F;
      tmp[i].blue = -1.0F;
    }
  tmp[0].red = color->red;
  tmp[0].green = color->green;
  tmp[0].blue = color->blue;
  calc_reflection_bis(&data, tmp, light, vector);
  color->red = tmp[0].red;
  color->green = tmp[0].green;
  color->blue = tmp[0].blue;
  return (EXIT_SUCCESS);
}

int
calc_refraction(t_detail *detail, t_color *color, t_light *light, double *vector)
{
  static int	i;
  t_camera	camera;
  t_object	*tmp;
  double	mat;

  mat = 1.0F;
  if (i >= CONST_TRANS || detail->object == NULL || !detail->object->effect[TRANSPARENCY])
    {
      if (detail->object)
	light_management(detail, &color[i], light, vector);
      else
	{
	  color[i].red = 0.0F;
	  color[i].green = 0.0F;
	  color[i].blue = 0.0F;
	}
      return (EXIT_SUCCESS);
    }
  light_management(detail, &color[i], light, vector);
  cpy_point(detail->position, camera.position);
  get_vector_refracte(vector, detail->normal, 1.0F, 1.0F);
  ++i;
  tmp = detail->object;
  get_object_refracte(&camera, detail, vector, &color[i]);
  calc_refraction(detail, color, light, vector);
  --i;
  if (tmp != NULL && tmp->effect[TRANSPARENCY] &&
      (color[i + 1].red >= 0.0F && color[i + 1].green >= 0.0F && color[i + 1].blue >= 0.0F))
    {
      color[i].red = (color[i + 1].red * tmp->effect[TRANSPARENCY]) +
	(color[i].red * (1.0F - tmp->effect[TRANSPARENCY]));
      color[i].green = (color[i + 1].green * tmp->effect[TRANSPARENCY]) +
	(color[i].green * (1.0F - tmp->effect[TRANSPARENCY]));
      color[i].blue = (color[i + 1].blue * tmp->effect[TRANSPARENCY]) +
	(color[i].blue * (1.0F - tmp->effect[TRANSPARENCY]));
    }
  return (EXIT_SUCCESS);
}

int
refraction_management(t_detail *detail, t_color *color, t_light *light, double *vector)
{
  t_color	tmp[CONST_TRANS + 1];
  double	tv[NB_DIMENSION];
  t_detail	td;
  int		i;

  i = -1;
  while (++i <= CONST_TRANS)
    {
      tmp[i].red = -1.0F;
      tmp[i].green = -1.0F;
      tmp[i].blue = -1.0F;
    }
  cpy_point(vector, tv);
  cpy_point(detail->position, td.position);
  cpy_point(detail->normal, td.normal);
  td.k = detail->k;
  td.object = detail->object;
  tmp[0].red = color->red;
  tmp[0].green = color->green;
  tmp[0].blue = color->blue;
  calc_refraction(&td, tmp, light, tv);
  color->red = tmp[0].red;
  color->green = tmp[0].green;
  color->blue = tmp[0].blue;
  return (EXIT_SUCCESS);
}
