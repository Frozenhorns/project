/*
** parse.c for parse in /home/ozouf_h//rt/parser_3ds
** 
** Made by harold ozouf
** Login   <ozouf_h@epitech.net>
** 
** Started on  Thu May 31 23:59:03 2012 harold ozouf
** Last update Sun Jun  3 02:13:04 2012 harold ozouf
*/

#include	<stdlib.h>
#include	<stdio.h>
#include	<unistd.h>
#include	<sys/types.h>
#include	<sys/stat.h>
#include	<fcntl.h>
#include	"get_next_line.h"
#include	"my_strtok.h"
#include	"object.h"
#include	"init_triangle.h"
#include	"my_rev_list.h"
#include	"parse_obj.h"

static	int	size_tab(char **tab)
{
  int	i;

  i = 0;
  while (tab[i])
    i++;
  return (i);
}

static void	add_vertice(t_vertice **v, double x, double y, double z)
{
  t_vertice	*new;

  new = malloc(sizeof(*new));
  new->pos[0] = x;
  new->pos[1] = y;
  new->pos[2] = z;
  new->next = *v;
  *v = new;
}

static void	add_vertice_norme(t_vertice_n **vn,
				  double x, double y, double z)
{
  t_vertice_n	*new;

  new = malloc(sizeof(*new));
  new->pos[0] = x;
  new->pos[1] = y;
  new->pos[2] = z;
  new->next = *vn;
  *vn = new;
}

static void	add_face(t_face **f, char *x, char *y, char *z)
{
  t_face	*new;
  char		**sep;

  new = malloc(sizeof(*new));
  sep = my_strtok(x, "/", TOK_DELIM);
  new->n = atoi(sep[1]);
  new->pos[0] = atoi(sep[0]);
  sep = my_strtok(y, "/", TOK_DELIM);
  new->pos[1] = atoi(sep[0]);
  sep = my_strtok(z, "/", TOK_DELIM);
  new->pos[2] = atoi(sep[0]);
  //  printf("add %d %d %d %d\n", new->pos[0], new->pos[1] ,new->pos[2], new->n);
  new->next = *f;
  *f = new;
}

static	int	get_coord(char *path, t_vertice **v, t_vertice_n **vn, t_face **f)
{
  int	fd;
  char	*buff;
  char	**sep;

  fd = open(path, O_RDONLY);
  if (fd == -1)
    exit(1);
  while ((buff = get_next_line(fd)))
    {
      sep = my_strtok(buff, " ", TOK_DELIM);
      if (sep && size_tab(sep) == 4)
	{
	  if (!my_strcmp("v", sep[0]))
	    add_vertice(v, atof(sep[1]), atof(sep[2]), atof(sep[3]));
	  else if (!my_strcmp("f", sep[0]))
	    add_face(f, sep[1], sep[2], sep[3]);
	  else if (!my_strcmp("vn", sep[0]))
	    add_vertice_norme(vn, atof(sep[1]), atof(sep[2]), atof(sep[3]));
	}
    }
  close(fd);
 return (1);
}

static double	*get_itm(t_vertice *v, t_vertice_n *vn, int flag, int src)
{
  t_vertice	*tmpv;
  t_vertice_n	*tmpvn;
  int		i;

  i = 0;
  tmpv = v;
  tmpvn = vn;
  if (flag)
    {
      while (++i < src && tmpv)
	tmpv = tmpv->next;
      if (tmpv)
	return (tmpv->pos);
      else
	return (NULL);
    }
  else
    {
      while (++i < src && tmpvn)
	tmpvn = tmpvn->next;
      if (tmpvn)
	return (tmpvn->pos);
      else
	return (NULL);
    }
  return (NULL);
}

static	void	get_object_from_file(char *path,
				     t_object **o, t_object *parent)
{
  t_face		*f;
  t_vertice       	*v;
  t_vertice_n     	*vn;
  double		pt[3][3];
  double		n[3];

  f = NULL;
  v = NULL;
  vn = NULL;
  get_coord(path, &v, &vn, &f);
  if (f == NULL)
    printf("f est null\n");
  my_rev_list(&v);
  my_rev_n(&vn);
  my_rev_f(&f);
  while (f)
    {
      if (copy_tab(pt[0], get_itm(v, vn, 1, f->pos[0])) &&
	  copy_tab(pt[1], get_itm(v, vn, 1, f->pos[1])) &&
	  copy_tab(pt[2], get_itm(v, vn, 1, f->pos[2])) &&
	  copy_tab(n, get_itm(v, vn, 0, f->n)))
	{
	  printf("%f %f %f |%f %f %f |%f %f %f |%f %f %f| %d %d %d %d\n",pt[0][0], pt[0][1], pt[0][2], pt[1][0], pt[1][1], pt[1][2], pt[2][0], pt[2][1], pt[2][2], n[0], n[1], n[2], f->pos[0], f->pos[1], f->pos[2], f->n);
	  
	  add_triangle(o, pt, n, parent);
	}
      f = f->next;
    }
}

void	parse_3ds(t_object **o)
{
  t_object	*tmp;
  t_object	*toto;
  t_object	*tmp2;
  t_object	*it;

  tmp = *o;
  while (tmp)
    {
      if (tmp->type == BLENDER && tmp->son)
	{
	  get_object_from_file(((t_blender *)tmp->son)->path, o, tmp);
	  toto = *o;
	  while (toto)
	    {
	      if (toto->type == TRIANGLE)
	  	{
	  	  printf("%f %f %f |%f %f %f |%f %f %f |%f %f %f\n", ((t_triangle *)toto->son)->pt1[0],  ((t_triangle *)toto->son)->pt1[1],  ((t_triangle *)toto->son)->pt1[2],  ((t_triangle *)toto->son)->pt2[0],  ((t_triangle *)toto->son)->pt2[1],  ((t_triangle *)toto->son)->pt2[2],  ((t_triangle *)toto->son)->pt3[0],  ((t_triangle *)toto->son)->pt3[1],  ((t_triangle *)toto->son)->pt3[2],  ((t_triangle *)toto->son)->n[0],  ((t_triangle *)toto->son)->n[1],  ((t_triangle *)toto->son)->n[2]);
	  	}
	      toto = toto->next;
	    }
	  it = tmp->next;
	  if (tmp->prev)
	    tmp->prev->next = tmp->next;
	  if (tmp->next)
	    tmp->next->prev = tmp->prev;
	  if (*o == tmp)
	    *o = tmp->next;
	}
      else
	it = tmp->next;
      tmp = it;
    }
}
