/*
** calc_effect.c for raytracer in /home/leprov_a//depot/rt/src/calc
** 
** Made by alexis leprovost
** Login   <leprov_a@epitech.net>
** 
** Started on  Wed May  9 20:18:25 2012 alexis leprovost
** Last update Mon May 28 00:34:24 2012 alexis leprovost
*/

#include	<stdlib.h>
#include	<stdio.h>
#include	<math.h>

#include	"raytracer.h"
#include	"global.h"
#include	"detail.h"
#include	"object.h"
#include	"color.h"
#include	"light.h"
#include	"utils.h"
#include	"init.h"
#include	"calc.h"
#include	"my.h"

int	get_near_object(t_camera *camera, t_detail *detail, double *vector, t_color *color)
{
  t_object	*tmp;

  tmp = detail->object;
  while (tmp->prev)
    tmp = tmp->prev;
  init_detail(detail);
  restat_color(color);
  while (tmp)
    {
      tmp->inter(camera, tmp, detail, vector);
      tmp = tmp->next;
    }
  if (detail->k > CONST_ERROR)
    calc_detail(detail, color, camera, vector);
  return (EXIT_SUCCESS);
}

int
calc_effect(t_detail *detail, t_color *color, t_light *light, double *vector)
{
  t_detail	*data;
  t_color	tmp[2];
  t_camera	camera;
  double	r[NB_DIMENSION];
  int	it;

  if (detail == NULL || color == NULL || light == NULL || vector == NULL)
    return (EXIT_FAILURE);
  light_management(detail, color, light, vector);
  restat_color(&tmp[1]);
  data = detail;
  it = 0;
  while (it < CONST_REFL && data->k > CONST_ERROR && data->object->effect[REFLECTION])
    {
      cpy_point(detail->position, camera.position);
      inverse_vector(vector);
      get_vector_reflechie(vector, detail->normal, r);
      cpy_point(r, vector);
      get_near_object(&camera, detail, vector, &tmp[0]);
      if (data->k > CONST_ERROR)
	{
	  light_management(detail, &tmp[0], light, vector);
	  color->red = (color->red * (1.0F - data->object->effect[REFLECTION])) +
	    (tmp[0].red * detail->object->effect[REFLECTION]);
	  color->green = (color->green * (1.0F - data->object->effect[REFLECTION])) +
	    (tmp[0].green * detail->object->effect[REFLECTION]);
	  color->blue = (color->blue * (1.0F - data->object->effect[REFLECTION])) +
	    (tmp[0].blue * detail->object->effect[REFLECTION]);
	  ++it;
	}
      data = detail;
    }
  return (EXIT_SUCCESS);
}
