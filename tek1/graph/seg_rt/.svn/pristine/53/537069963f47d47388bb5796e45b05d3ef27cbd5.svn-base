#!/usr/bin/python2.7

from ui import *
from obj import *
import sys
try:
    from PyQt4.QtCore import *  # Moteur controle Qt
    from PyQt4.QtGui import *   # IHM Qt
except:
    import time                 # Gestion heures systeme
    for i in range(1, 11):
        print ("PyQt is not install - check in (%d/10)", i)
        time.sleep(5)
        sys.exit(1)

import ui

class uiDialog(QDialog):
    def __init__(self, Window=None, winFlag=0):
        super(uiDialog, self).__init__(Window)

class Coor:
    def __init__(self, Window, Layout=None, one="X :", sec="Y :", third="Z :"):
        self.x = None
        self.Lab_x = None

        self.y = None
        self.Lab_y = None

        self.z = None
        self.Lab_z = None

        if (one):
            self.x = QLineEdit("0", Window)
            self.Lab_x = QLabel(one, Window)

        if (sec):
            self.y = QLineEdit("0", Window)
            self.Lab_y = QLabel(sec, Window)

        if (third):
            self.z = QLineEdit("0", Window)
            self.Lab_z = QLabel(third, Window)

    def getText(self, Name, first="X=\"", sec="Y=\"", third="Z=\""):
        x = "<" + Name + " "
        if (first and self.x):
            x = x + first + self.x.displayText() + "\" "
        if (sec and self.y):
            x = x + sec + self.y.displayText() + "\" "
        if (third and self.z):
            x = x + third + self.z.displayText() + "\" "
        x = x + "/>"
        return (x)

class uiAddObject(uiDialog):

    def __init__(self, Window=None, winFlag=0, obj=None, s=None):
        super(uiAddObject, self).__init__(Window)
        self.Parent = Window
        self.Obj = obj
        self.str = s
        self.color = "000000"
        self.link = None
        self.per = None
        self.effect = None
        self.isNeg = None

    def init(self, obj):
        self.GridLay = QGridLayout(self)
        self.Coor = QGroupBox("Position", self)
        hLayout = QHBoxLayout(self)


        self.pos = Coor(self)

        hLayout.addWidget(self.pos.Lab_x)
        hLayout.addWidget(self.pos.x)
        hLayout.addWidget(self.pos.Lab_y)
        hLayout.addWidget(self.pos.y)
        hLayout.addWidget(self.pos.Lab_z)
        hLayout.addWidget(self.pos.z)

        self.Coor.setLayout(hLayout)
        self.GridLay.addWidget(self.Coor, 0, 0)

        self.Coor = QGroupBox("Rotation", self)
        hLayout = QHBoxLayout(self)

        self.rot = Coor(self)

        hLayout.addWidget(self.rot.Lab_x)
        hLayout.addWidget(self.rot.x)
        hLayout.addWidget(self.rot.Lab_y)
        hLayout.addWidget(self.rot.y)
        hLayout.addWidget(self.rot.Lab_z)
        hLayout.addWidget(self.rot.z)

        self.Coor.setLayout(hLayout)
        self.GridLay.addWidget(self.Coor, 1, 0)

        if (self.Obj != "camera" and self.Obj != "light"):
            self.Coor = QGroupBox("Perturbation", self)
            hLayout = QHBoxLayout(self)

            self.per = Coor(self)

            hLayout.addWidget(self.per.Lab_x)
            hLayout.addWidget(self.per.x)
            hLayout.addWidget(self.per.Lab_y)
            hLayout.addWidget(self.per.y)
            hLayout.addWidget(self.per.Lab_z)
            hLayout.addWidget(self.per.z)

            self.Coor.setLayout(hLayout)
            self.GridLay.addWidget(self.Coor, 2, 0)

            self.Coor = QGroupBox("Effect", self)
            hLayout = QHBoxLayout(self)

            self.effect = Coor(self, one="Brightness", sec="reflection", third=None)
            hLayout.addWidget(self.effect.Lab_x)
            hLayout.addWidget(self.effect.x)
            hLayout.addWidget(self.effect.Lab_y)
            hLayout.addWidget(self.effect.y)

            self.Coor.setLayout(hLayout)
            self.GridLay.addWidget(self.Coor, 3, 0)

        if (self.Obj != "camera"):
            self.Coor = QGroupBox("Color / Template", self)
            hLayout = QHBoxLayout(self)

            if (self.Obj != "camera" or self.Obj != "light"):
                button = QPushButton("...", self)
                button.connect(button, SIGNAL("clicked()"), self.setLink)
                hLayout.addWidget(QLabel("Template : "))
                self.labLink = QLabel("/", self)
                hLayout.addWidget(self.labLink)
                hLayout.addWidget(button)
            if (self.Obj != "camera"):
                hLayout.addWidget(QLabel(" Color : "))
                self.labColor = QLabel("000000", self)
                hLayout.addWidget(self.labColor)
                button = QPushButton("...", self)
                button.connect(button, SIGNAL("clicked()"), self.setColor)
                hLayout.addWidget(button)

            self.Coor.setLayout(hLayout)
            self.GridLay.addWidget(self.Coor, 4, 0)

        if (self.Obj != "camera" and self.Obj != "light"):
            self.other = QGroupBox("Other", self)
            self.isNeg = QCheckBox("Negatif", self)
            hLayout = QHBoxLayout(self)

            hLayout.addWidget(self.isNeg)
            if (self.Obj == "sphere"):
                self.rad = QLineEdit("0", self)
                hLayout.addWidget(QLabel("Radius : "))
                hLayout.addWidget(self.rad)
            if (self.Obj == "cone"):
                self.rad = QLineEdit("0", self)
                hLayout.addWidget(QLabel("Angle : "))
                hLayout.addWidget(self.rad)
            if (self.Obj == "cylindre"):
                self.rad = QLineEdit("0", self)
                hLayout.addWidget(QLabel("Randius : "))
                hLayout.addWidget(self.rad)
            if (self.Obj == "tore"):
                self.radLittle = QLineEdit("0", self)
                hLayout.addWidget(QLabel("Radius little: "))
                hLayout.addWidget(self.radLittle)
                self.radMax = QLineEdit("0", self)
                hLayout.addWidget(QLabel("Radius Grand: "))
                hLayout.addWidget(self.radMax)

            self.other.setLayout(hLayout)
            self.GridLay.addWidget(self.other, 9, 0)

        hLayout = QHBoxLayout(self)
        act = QPushButton("Ok", self)
        act.connect(act, SIGNAL("clicked()"), self.Parent.getInfo)
        hLayout.addWidget(act)
        act = QPushButton("Quit", self)
        act.connect(act, SIGNAL("clicked()"), self.quit)
        hLayout.addWidget(act)
        self.GridLay.addLayout(hLayout, 10, 0)
        self.show()

    def setColor(self):
        c = QColorDialog().getColor()
        self.color = c.name()
        self.labColor.setText(self.color[1:])

    def setLink(self):
        self.setEnabled(False)
        fname = QFileDialog.getOpenFileName(self, 'Open file',
                                                  '.')
        link = str(fname)
        if (link):
            self.link = link
            self.labLink.setText(link)
        self.setEnabled(True)
    def ok(self):
        if (self.Parent):
            self.Parent.setEnabled(True)
        self.accept()

    def quit(self):
        if (self.Parent):
            self.Parent.setEnabled(True)
        self.reject()

    def getText(self):
        s = "\n\t<" + self.Obj
        if (self.isNeg):
            if self.isNeg.isChecked() == False:
                s += " type=\"normal\""
            else:
                s += " type=\"negatif\""
        s += ">\n"
        s += "\t\t" + self.pos.getText("location")
        s += "\n"
        s += "\t\t" + self.rot.getText("rotation")
        s += "\n"
        if (self.Obj != "camera" and self.Obj != "Light"):
            s += "\t\t" + self.per.getText("perturbation")
            s += "\n"
        if (self.Obj == "sphere"):
            s += "\t\t" + "<radius>" + self.rad.displayText() + "</radius>"
            s += "\n"
        if (self.Obj == "cone"):
            s += "\t\t" + "<radius>" + self.rad.displayText() + "</radius>"
            s += "\n"
        if (self.Obj == "cylindre"):
            s += "\t\t" + "<radius>" + self.rad.displayText() + "</radius>"
            s += "\n"
        if (self.Obj != "camera"):
            s += "\t\t" + "<color>" + self.color[1:] + "</color>"
            s += "\n"
        if (self.link):
            s += "\t\t" + "<template>" + self.link + "</template>"
            s += "\n"
        if (self.effect):
            s += "\t\t" + self.effect.getText("effect",
                                              first="BIRGHTNESS=\"", sec="REFLECTION=\"", third=None)
        s += "\n\t</" + self.Obj + ">"
        return (s)
