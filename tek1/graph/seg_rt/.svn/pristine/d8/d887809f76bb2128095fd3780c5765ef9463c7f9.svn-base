#!/usr/bin/python2.7

#Made by Vink

import sys
from xml.dom import minidom
from obj import *
from sub_ui import *

try:
    from PyQt4.QtCore import *  # Moteur controle Qt
    from PyQt4.QtGui import *   # IHM Qt
except:
    import time                 # Gestion heures systeme
    for i in range(1, 11):
        print ("PyQt is not install - check in (%d/10)", i)
        time.sleep(5)
        sys.exit(1)

#############################
###### UiButton #############
#############################

class   uiButton(QPushButton):
    def __init__(self, Window, title='button', height=50, width=50,
                 setToolTip='This is a <b>QPushButton</b> widget'):
        super(uiButton, self).__init__(title, Window)
        self.init(Window, title, height, width, setToolTip)
    def init(self, Window, title='button', height=50, width=50,
                 setToolTip='This is a <b>QPushButton</b> widget'):
        self.setToolTip('This is a <b>QPushButton</b> widget')
        self.resize(self.sizeHint())
        self.move(height, width)

#############################

#############################
###### UiImage  #############
#############################

class   uiImage(QLabel):
    def __init__(self, path, Window):
        super(uiImage, self).__init__("Image", Window)
        img = QPixmap(path)
        self.setPixmap(img)


#############################

#############################
###### UiAction #############
#############################

class   uiAction(QAction):
    def __init__(self, Window, act, path=None, Shortcut=None, status=None, connect=None, icon=None):
        if (icon == None):
            super(uiAction, self).__init__(act, Window)
        else:
            super(uiAction, self).__init__(icon, act, Window)
        if (Shortcut):
            self.setShortcut(Shortcut)
        if (status):
            self.setStatusTip(status)
        if (connect):
            self.connect(connect)
    def connect(self, connect):
        self.triggered.connect(connect)

#############################

#############################
###### UiMenu   #############
#############################

class   uiMenu(QMenu):
    def __init__(self, title, Window):
        super(uiMenu, self).__init__(title, Window)
        self.Action = dict()
    def addEvent(self, act, Name):
        self.Action[Name] = act
        self.addAction(self.Action[Name])

#############################

#############################
###### UiMenuBar ############
#############################

class   uiMenuBar(QMenuBar):
    def __init__(self, Window):
        super(uiMenuBar, self).__init__(Window)
        self.Menu = dict()

    def addAction(self, action, name, menu='&File'):
        self.Menu[name] = self.addMenu(menu)
        self.Menu[name].addAction(action)

#############################

#############################
###### UiMainWindow #########
#############################

class   uiMainWindow(QMainWindow):

    def __init__(self, height=400, width=400):
        super(uiMainWindow, self).__init__()

        self.Menu = dict()
        self.Action = dict()
        self.Name = None
        self.toolBar = None
        self.Image = None
        self.ImagePath = None
        self.button = dict()
        self.initUI(height, width)
        self.head = None
        self.foot = None

    def initUI(self, height, width):

        QToolTip.setFont(QFont('SansSerif', 10))

        self.setToolTip('This is a <b>QWidget</b> widget')
        #bottomBar = QTabWidget(self)

######### Creation of Menu
        self.createAction()
        self.createMenu()
        self.createToolBar()
        self.createLeftMenu()
        self.createCentralMenu()

        self.setGeometry(0, 0, height, width)
#       self.resize.connect(self.MainResize)
        self.MainResize()

        self.setWindowTitle('Interface')
        self.show()

###########
    def MainResize(self):
        menu_width = self.width() / 7
        menu_height = self.width() / 7
        menu_start = self.height() / 12
        size_menubar = 30

        self.toolBar.setGeometry(0, size_menubar, 200, menu_start - size_menubar)
        self.central.setGeometry(menu_width, menu_start,
                                 self.width() - (menu_width),
                                 self.height() - ((menu_start - size_menubar)) - size_menubar)
        self.leftBar.setGeometry(0, menu_start, menu_width, self.height() - menu_start)
        self.menubar.setGeometry(0,0, 250, size_menubar)

    def createAction(self):

        self.Action["New"] = uiAction(self,
                                      '&New',
                                      connect=self.openFile,
                                      icon=QIcon("./icone/open.jpg"))
        self.Action["Open"] = uiAction(self,
                                       '&Open',
                                       connect=self.openFile,
                                       icon=QIcon("./icone/open.jpg"),
                                       Shortcut="Ctrl+o")
        self.Action["Save"] = uiAction(self,
                                       '&Save',
                                       connect=self.saveFile,
                                       icon=QIcon("./icone/save.png"),
                                       Shortcut="Ctrl+s")
        self.Action["Save"].setEnabled(False)
        self.Action["SaveAs"] = uiAction(self,
                                         '&SaveAs',
                                         connect=self.saveToFile,
                                         icon=QIcon("./icone/save.png"),
                                         Shortcut="Ctrl+Shift+s")
        self.Action["SaveAs"].setEnabled(False)
        self.Action["Camera"] = uiAction(self,
                                         '&Camera',
                                         connect=self.addCamera,
                                         icon=QIcon("./icone/sphere.png"),
                                         Shortcut="Ctrl+Alt+c")
        self.Action["Camera"].setEnabled(False)
        self.Action["Light"] = uiAction(self,
                                         '&Light',
                                         connect=self.addLight,
                                         icon=QIcon("./icone/sphere.png"),
                                         Shortcut="Ctrl+Alt+c")
        self.Action["Light"].setEnabled(False)
        self.Action["Plan"] = uiAction(self,
                                         '&Plan',
                                         connect=self.addPlan,
                                         icon=QIcon("./icone/sphere.png"),
                                         Shortcut="Ctrl+Alt+s")
        self.Action["Plan"].setEnabled(False)
        self.Action["Sphere"] = uiAction(self,
                                         '&Sphere',
                                         connect=self.addSphere,
                                         icon=QIcon("./icone/sphere.png"),
                                         Shortcut="Ctrl+Alt+s")
        self.Action["Sphere"].setEnabled(False)
        self.Action["Cylindre"] = uiAction(self,
                                         '&Cylindre',
                                         connect=self.addCylindre,
                                         icon=QIcon("./icone/sphere.png"),
                                         Shortcut="Ctrl+Alt+s")
        self.Action["Cylindre"].setEnabled(False)
        self.Action["Cone"] = uiAction(self,
                                         '&Cone',
                                         connect=self.addCylindre,
                                         icon=QIcon("./icone/sphere.png"),
                                         Shortcut="Ctrl+Alt+s")
        self.Action["Cone"].setEnabled(False)
        self.Action["Image"] = uiAction(self,
                                        '&Image',
                                        connect=self.getImage,
                                        icon=QIcon("./icone/image.png"))
        self.Action["Exit"] = uiAction(self,
                                       '&Exit',
                                       connect=qApp.quit,
                                       icon=QIcon("./icone/exit.png"),
                                       Shortcut="Ctrl+q")

    def createToolBar(self):
        self.toolBar = QToolBar("Tools", self)

        self.toolBar.addAction(self.Action["Save"])
        self.toolBar.addAction(self.Action["Open"])
        self.toolBar.addAction(self.Action["Image"])
        self.toolBar.addAction(self.Action["Sphere"])
        self.toolBar.addAction(self.Action["Exit"])

    def createMenu(self):
        self.menubar = uiMenuBar(self)

        self.Menu["file"] = uiMenu("File", self)

        self.Menu["file"].addAction(self.Action["New"])
        self.Menu["file"].addAction(self.Action["Save"])
        self.Menu["file"].addAction(self.Action["SaveAs"])
        self.Menu["file"].addAction(self.Action["Open"])
        self.Menu["file"].addAction(self.Action["Exit"])

        self.Menu["Tools"] = uiMenu("Tools", self)
        self.Menu["Tools"].addEvent(self.Action["Image"], "Image")
        self.Menu["Tools"].addEvent(self.Action["Sphere"], "Sphere")

        self.Menu["Edit"] = uiMenu("Edit", self)
        ##
        self.Menu["Object"] = uiMenu("Object", self)
        ####
        self.Menu["AddObj"] = uiMenu("AddObj", self)
        ######
        self.Menu["AddObj"].addAction(self.Action["Plan"])
        self.Menu["AddObj"].addAction(self.Action["Sphere"])
        self.Menu["AddObj"].addAction(self.Action["Cylindre"])
        self.Menu["AddObj"].addAction(self.Action["Cone"])
        ######
        self.Menu["Object"].addMenu(self.Menu["AddObj"])
        ####
        self.Menu["Camera"] = uiMenu("Camera", self)
        self.Menu["AddCam"] = uiMenu("AddCam", self)
        self.Menu["AddCam"].addAction(self.Action["Camera"])
        self.Menu["Camera"].addMenu(self.Menu["AddCam"])

        self.Menu["Light"] = uiMenu("Light", self)
        self.Menu["AddLight"] = uiMenu("AddLight", self)
        self.Menu["AddLight"].addAction(self.Action["Light"])
        self.Menu["Light"].addMenu(self.Menu["AddLight"])


        self.Menu["Edit"].addMenu(self.Menu["Object"])
        self.Menu["Edit"].addMenu(self.Menu["Camera"])
        self.Menu["Edit"].addMenu(self.Menu["Light"])
        ##

        self.Menu["Run"] = uiMenu("Run", self)
        self.Menu["Info"] = uiMenu("Info", self)

        self.menubar.addMenu(self.Menu["file"])
        self.menubar.addMenu(self.Menu["Tools"])
        self.menubar.addMenu(self.Menu["Edit"])
        self.menubar.addMenu(self.Menu["Run"])
        self.menubar.addMenu(self.Menu["Info"])

###########
    def createCentralMenu(self):
        self.central = QTabWidget(self)
        centralLayout = QGridLayout(self.central)

        self.Image = uiImage(self.ImagePath, self)
        self.central.addTab(self.Image, "Image")

        self.xml = QTextEdit(self)
        self.central.addTab(self.xml, "Xml")
        self.xml.setEnabled(False)

    def createLeftMenu(self):
        self.leftBar = QTabWidget(self)
        g = QGroupBox("Window", self.leftBar)
        hLayout = QGridLayout(self.leftBar)

        self.win_x = QLineEdit("0", self.leftBar)
        hLayout.addWidget(QLabel("X : "), 0, 0)
        hLayout.addWidget(self.win_x, 0, 1)

        self.win_y = QLineEdit("0", self.leftBar)
        hLayout.addWidget(QLabel("Y : "), 1, 0)
        hLayout.addWidget(self.win_y, 1, 1)
        g.setLayout(hLayout)

#        self.leftBar.addWidget(g)

    def insertText(self, Find, inser, s):
        i = s.find(Find)
        i += s.find(">", i) - i
        print inser
        if (i >= 0):
            result = s[:i] + inser + s[i:]
            QTextDocument(result)
            self.xml.setDocument(QTextDocument(result))
            return (result)
        return (None)

    def getInfo(self):
        self.setEnabled(True)
        u = self.q.getText()
        l = self.xml.toPlainText()
        e = ""
        r = ""
        s = str(l)
        if (self.q.Obj != "camera" and self.q.Obj != "light"):
            o = "<object"
        else:
            o = "<scene"
        i = s.find("scene")
        if (i < 0):
            e += "  <scene>\n"
            r = "\n  </scene>" + r
        if (self.q.Obj != "caemra" and self.q.Obj != "light"):
            i = s.find("object")
            if (i < 0):
                e += "\t<object>\n"
                r = "\t\n</object>" + r
        u = e + u + r
        if (self.insertText(o, u, s) == None):
            if (self.insertText("<scene", u, s) == None):
                if (self.insertText("<window", u , s) == None):
                    self.xml.setDocument(QTextDocument(u))
        self.q.ok()

    def createRightMenu(self):
        self.rightBar = QTabWidget(self)
        self.rightGrid = QGridLayout(self.rightBar)

    def addLight(self):
        self.addObject("light")

    def addCamera(self):
        self.addObject("camera")

    def addPlan(self):
        self.addObject("plan")

    def addSphere(self):
        self.addObject("sphere")

    def addCylindre(self):
        self.addObject("cylindre")

    def addCone(self):
        self.addObject("cone")

    def addObject(self, s):
        self.setEnabled(False)
        self.q = uiAddObject(self, obj=s)
        self.q.init(self)
        if (self.Name == None):
            self.nameToFile()

    def openFile(self):
        self.setEnabled(False)
        fname = QFileDialog.getOpenFileName(self, 'Open file',
                                                  '.')
        link = str(fname)
        if (link):
            self.Action["Save"].setEnabled(True)
            self.Action["SaveAs"].setEnabled(True)
            self.Action["Sphere"].setEnabled(True)
            self.Action["Cylindre"].setEnabled(True)
            self.Action["Plan"].setEnabled(True)
            self.Action["Cone"].setEnabled(True)
            self.Action["Light"].setEnabled(True)
            self.Action["Camera"].setEnabled(True)
            x = open(link)
            r = x.read()
            self.Name = link
            i = r.find(">", r.find("window"))
            if (i > 0):
                self.head = r[:(i + 1)]
                a = self.head.find("=", self.head.find("x"))
                if (a > 0):
                    self.win_x.setText(self.head[(a + 1):self.head.find(" ", a)])
                a = self.head.find("=", self.head.find("y"))
                if (a > 0):
                    self.win_y.setText(self.head[(a + 1):self.head.find(" ", a)])
            i += 1
            while (r[i] != '<'):
                i += 1
            j = r.find("</window")
            if (i > 0):
                self.foot = r[(j):]
            print r[i:j]
            self.xml.setDocument(QTextDocument(r[i:j]))
            self.xml.setDocumentTitle(fname)
            self.xml.setEnabled(True)
        self.setEnabled(True)

    def getImage(self):
        fname = QFileDialog.getOpenFileName(self, 'Open file',
                                                  '.')
        link = str(fname)
        self.ImagePath = link
        self.setImage()

    def setImage(self):
        self.Image.setPixmap(QPixmap(self.ImagePath))
        self.central.show()

    def saveFile(self):
        if (self.Name == None):
            self.nameToFile()
        l = self.xml.toPlainText()
        s = str(l)
        files = open(self.Name, 'w')
        files.write("<window x=" + self.win_x.displayText + "y=" + self.win_y.displayText + ">\n"
                    + s +
                    "\n" + self.foot)
        files.close()

    def saveToFile(self):
        self.nameToFile()
        self.saveFile()

    def nameToFile(self):
        print self.xml.toPlainText()
        self.Name = QFileDialog.getSaveFileName(self)
        if (('.xml' in self.Name) == False):
            self.Name += ".xml"

    def createXmlFile(self):
        self.xml.init(self.Name)

    def leftMenu(self):
        s.elf.leftBar.show()

    def rightMenu(self):
        self.rightBar.show()

#############################
